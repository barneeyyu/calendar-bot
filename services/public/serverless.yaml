# The service name should be a static string and should NOT be prefixed or suffixed with any dynamic variables, such as stage name.
service: calendar-bot

# You can pin your service to only deploy with a specific Serverless version
# Check out docs.serverless.com for more details
frameworkVersion: "3"
configValidationMode: error

# true means use .env file
useDotenv: true

provider:
  name: aws
  region: ${env:AWS_REGION, env:AWS_DEFAULT_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL
  architecture: arm64
  # deploymentBucket:
  #   name: ${ssm:/serverless-s3-bucket}
  #   blockPublicAccess: true
  #   serverSideEncryption: aws:kms
  #   sseKMSKeyId: ${ssm:/serverless-s3-kms-key, null}
  iam:
    role:
      # Add permissions as needed.
      # Use Principal of Least Privilege https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege
      # Keep permissions regional as much as possible https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/
      # Example
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:${aws:region}:${aws:accountId}:log-group:*
          Condition:
            StringEquals:
              "aws:RequestedRegion": ${aws:region}
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "Fn::GetAtt": [ CalendarEventsTable, Arn ]
        - Effect: Allow
          Action:
            - scheduler:CreateSchedule
            - iam:PassRole
          Resource: 
            - "*"
    # deploymentRole: arn:aws:iam::${aws:accountId}:role/RoleForServerlessDeploy
  tracing:
    lambda: true
    apiGateway: true # Enable AWS X-Ray Tracing on your api gateway

  # Enable REST API logs
  # This can either be set to `restApi: true` to use defaults, or configured via subproperties
  # Can only be configured if the API is created by Serverless Framework
  # logs:
  #   restApi:
  #     accessLogging: true
  #     format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency" }'
  #     roleManagedExternally: true

  kmsKeyArn: ${ssm:/serverless-lambda-kms-key, null}
  logRetentionInDays: 90

  # You can restrict API to only allow connection with service platform
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*

package:
  individually: true

functions:
  eventHandler:
    image:
      uri: ${self:custom.ecrRepoUri}/event-handler:latest
      command: 
        - handler # assume the handler is the entrypoint
    name: ${self:custom.functionName.eventHandler}
    environment:
      CHANNEL_SECRET: ${env:CHANNEL_SECRET}
      CHANNEL_TOKEN: ${env:CHANNEL_TOKEN}
      OPENAI_BASE_URL: ${env:OPENAI_BASE_URL}
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
      REMINDER_FUNCTION_ARN: 
        Fn::GetAtt: [EventReminderLambdaFunction, Arn]
      SCHEDULER_ROLE_ARN:
        Fn::GetAtt: [SchedulerRole, Arn]
    events:
      - http:
          path: /line-events
          method: post
    # vpc: # Enable this block if service needs to be deployed into VPC
    #   securityGroupIds:
    #   subnetIds:

  eventReminder:
    image:
      uri: ${self:custom.ecrRepoUri}/event-reminder:latest
      command: 
        - handler # assume the handler is the entrypoint
    name: ${self:custom.functionName.eventReminder}
    environment:
      CHANNEL_SECRET: ${env:CHANNEL_SECRET}
      CHANNEL_TOKEN: ${env:CHANNEL_TOKEN}

  # API domain mapping
  # - ${file(apiMapping.yaml)}
  # - ${file(apiGatewayAlarm.yaml)}

custom:
  functionName:
    eventHandler: ${self:service}-${self:provider.stage}-event-handler
    eventReminder: ${self:service}-${self:provider.stage}-event-reminder 
  # prune:
  #   automatic: true
  #   number: 10
  # alerts:
  #   dashboards: true
  #   alarms:
  #     - functionErrors
  ecrRepoUri: ${aws:accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/barney/calendar-bot

  # domainName: ${ssm:VCSApiDomainName, null}

resources:
  Resources:
    CalendarEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-events
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: eventTime
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: eventTime
            KeyType: RANGE
    SchedulerRole:
      Type: AWS::IAM::Role
      DependsOn: EventReminderLambdaFunction
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: InvokeLambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource:
                    Fn::GetAtt: [EventReminderLambdaFunction, Arn]

plugins:
  - "@serverless/safeguards-plugin"
  - serverless-prune-plugin
  - serverless-plugin-aws-alerts
